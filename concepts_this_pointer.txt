1) “this” pointer is a hidden parameter implicitly added to any non-static member function.
   It is the first parameter to the member function.
2) for a non-const member function, "this" pointer has following definition:
   A * const this
3) for a const member function, "this" pointer has following definition:
   const A * const this
4) An object's this pointer isn't part of the object itself. It's not reflected in the result of a sizeof statement on the object. 
5) When a nonstatic member function is called for an object, the compiler passes the object's address to the function as a hidden argument.

class A
{
	int m_var;
	const int m_cvar;
public:
	A():m_cvar(11){}
	void func()
	{
		m_var = 10;
		cout<<m_var;
	}
	void func() const
	{
		cout<<m_cvar;
	}
};

The compiler will change the above two class member functions, func(), as follows:

void func(A * const this)
{
	this->m_var = 10;
	cout<<this->m_var;
}
void func(const A * const this) const
{
	cout<<this->m_cvar;
}

A var1;
var1.func(); // the compiler will change this statement to:  func(&var1);


